"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EnvVarAndPathCheck", {
  enumerable: true,
  get: function () {
    return _env.default;
  }
});
exports.default = exports.OptionalGstreamerCheck = exports.OptionalAppBundleCheck = exports.JavaOnPathCheck = exports.AndroidToolCheck = void 0;

require("source-map-support/register");

var _doctor = require("./doctor");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _env = _interopRequireDefault(require("./env"));

require("colors");

let checks = [];
let javaHome = _appiumSupport.system.isWindows() ? '%JAVA_HOME%' : '$JAVA_HOME';
checks.push(new _env.default('ANDROID_HOME'));
checks.push(new _env.default('JAVA_HOME'));

class JavaOnPathCheck extends _doctor.DoctorCheck {
  async diagnose() {
    if (process.env.JAVA_HOME) {
      let javaHomeBin = _path.default.resolve(process.env.JAVA_HOME, 'bin');

      if (process.env.PATH.indexOf(javaHomeBin) + 1) {
        return (0, _utils.ok)(`Bin directory of ${javaHome} is set`);
      }
    }

    return (0, _utils.nok)(`Bin directory for ${javaHome} is not set`);
  }

  fix() {
    return `Add ${`'${javaHome}${_path.default.sep}bin'`.bold} to your ${'PATH'.bold} environment`;
  }

}

exports.JavaOnPathCheck = JavaOnPathCheck;

class AndroidToolCheck extends _doctor.DoctorCheck {
  constructor(toolName, toolPath) {
    super();
    this.toolName = toolName;
    this.toolPath = toolPath;
  }

  async diagnose() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return (0, _utils.nok)(`${this.toolName} could not be found because ANDROID_HOME is NOT set!`);
    }

    let fullPath = _path.default.resolve(process.env.ANDROID_HOME, this.toolPath);

    return (await _appiumSupport.fs.exists(fullPath)) ? (0, _utils.ok)(`${this.toolName} exists at: ${fullPath}`) : (0, _utils.nok)(`${this.toolName} could NOT be found at '${fullPath}'!`);
  }

  fix() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return `Manually configure ${'ANDROID_HOME'.bold} and run appium-doctor again.`;
    }

    return `Manually install ${this.toolName.bold} and add it to ${'PATH'.bold}. ` + 'https://developer.android.com/studio#cmdline-tools and ' + 'https://developer.android.com/studio/intro/update#sdk-manager may help to setup.';
  }

}

exports.AndroidToolCheck = AndroidToolCheck;
checks.push(new AndroidToolCheck('adb', _path.default.join('platform-tools', _appiumSupport.system.isWindows() ? 'adb.exe' : 'adb')));
checks.push(new AndroidToolCheck('android', _path.default.join('tools', _appiumSupport.system.isWindows() ? 'android.bat' : 'android')));
checks.push(new AndroidToolCheck('emulator', _path.default.join('tools', _appiumSupport.system.isWindows() ? 'emulator.exe' : 'emulator')));
checks.push(new JavaOnPathCheck());

class OptionalAppBundleCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const bundletoolPath = await (0, _utils.resolveExecutablePath)('bundletool.jar');
    return bundletoolPath ? (0, _utils.okOptional)(`bundletool.jar is installed at: ${bundletoolPath}`) : (0, _utils.nokOptional)('bundletool.jar cannot be found');
  }

  async fix() {
    return `${'bundletool.jar'.bold} is used to handle Android App Bundle. Please read http://appium.io/docs/en/writing-running-appium/android/android-appbundle/ to install it` + `${_appiumSupport.system.isWindows() ? '. Also consider adding the ".jar" extension into your PATHEXT environment variable in order to fix the problem for Windows' : ''}`;
  }

}

exports.OptionalAppBundleCheck = OptionalAppBundleCheck;
checks.push(new OptionalAppBundleCheck());

class OptionalGstreamerCheck extends _doctor.DoctorCheck {
  constructor(...args) {
    super(...args);
    this.GSTREAMER_BINARY = `gst-launch-1.0${_appiumSupport.system.isWindows() ? '.exe' : ''}`;
    this.GST_INSPECT_BINARY = `gst-inspect-1.0${_appiumSupport.system.isWindows() ? '.exe' : ''}`;
  }

  async diagnose() {
    const gstreamerPath = await (0, _utils.resolveExecutablePath)(this.GSTREAMER_BINARY);
    const gstInspectPath = await (0, _utils.resolveExecutablePath)(this.GST_INSPECT_BINARY);
    return gstreamerPath && gstInspectPath ? (0, _utils.okOptional)(`${this.GSTREAMER_BINARY} and ${this.GST_INSPECT_BINARY} are installed at: ${gstreamerPath} and ${gstInspectPath}`) : (0, _utils.nokOptional)(`${this.GSTREAMER_BINARY} and/or ${this.GST_INSPECT_BINARY} cannot be found`);
  }

  async fix() {
    return `${`${this.GSTREAMER_BINARY} and ${this.GST_INSPECT_BINARY}`.bold} are used to stream the screen of the device under test. ` + 'Please read https://appium.io/docs/en/writing-running-appium/android/android-screen-streaming/ to install them and for more details';
  }

}

exports.OptionalGstreamerCheck = OptionalGstreamerCheck;
checks.push(new OptionalGstreamerCheck());
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
